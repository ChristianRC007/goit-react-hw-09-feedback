{"version":3,"sources":["components/Statistics/Statistics.tsx","components/FeedbackOptions/FeedbackOptions.tsx","components/Section/Section.tsx","components/Notification/Notification.tsx","App.tsx","index.tsx"],"names":["Statistics","good","neutral","bad","total","positivePercentage","className","isNaN","FeedbackOptions","options","onLeaveFeedback","Object","keys","map","key","name","type","onClick","Section","title","children","Notification","message","App","useState","setGood","setNeutral","setBad","countTotalFeedback","totalFeedbacks","Math","round","countPositiveFeedbackPercentage","evt","target","prev","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAUe,SAASA,EAAT,GAMJ,IALTC,EAKQ,EALRA,KACAC,EAIQ,EAJRA,QACAC,EAGQ,EAHRA,IACAC,EAEQ,EAFRA,MACAC,EACQ,EADRA,mBAEA,OACE,qBAAIC,UAAU,aAAd,UACE,qBAAIA,UAAU,mBAAd,mBACQ,+BAAOL,OAEf,qBAAIK,UAAU,mBAAd,sBACW,+BAAOJ,OAElB,qBAAII,UAAU,mBAAd,kBACO,+BAAOH,OAEd,qBAAIG,UAAU,mBAAd,oBACS,+BAAOF,OAEhB,qBAAIE,UAAU,mBAAd,+BACqB,IACnB,iCAAOC,MAAMF,GAAsB,IAAMA,EAAzC,a,MCpBO,SAASG,EAAT,GAA+D,IAApCC,EAAmC,EAAnCA,QAASC,EAA0B,EAA1BA,gBACjD,OACE,oBAAIJ,UAAU,OAAd,SACGK,OAAOC,KAAKH,GAASI,KAAI,SAAAC,GAAG,OAC3B,oBAAIR,UAAU,aAAd,SACE,wBACEA,UAAU,eACVS,KAAMD,EACNE,KAAK,SACLC,QAASP,EAJX,SAMGI,KAP2BA,Q,MCRzB,SAASI,EAAT,GAA8C,IAA3BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,SACvC,OACE,oCACE,6BAAKD,IACJC,K,MCPQ,SAASC,EAAT,GAA2C,IAAnBC,EAAkB,EAAlBA,QACrC,OAAO,4BAAIA,ICDE,SAASC,IACtB,MAAwBC,mBAAS,GAAjC,mBAAOvB,EAAP,KAAawB,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOtB,EAAP,KAAgBwB,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOrB,EAAP,KAAYwB,EAAZ,KAsBMC,EAAqB,WACzB,OAAO3B,EAAOC,EAAUC,GAQpB0B,EAAiBD,IACjBvB,EANkC,WACtC,IAAMD,EAAQwB,IACd,OAAOE,KAAKC,MAAc,IAAP9B,EAAcG,GAIR4B,GAE3B,OACE,qCACE,cAAC,EAAD,CAASb,MAAM,wBAAf,SACE,cAAC,EAAD,CACEV,QAAS,CAAER,OAAMC,UAASC,OAC1BO,gBArCgB,SACtBuB,GAIA,OAFiBA,EAAIC,OAAbnB,MAGN,IAAK,OACHU,GAAQ,SAAAU,GAAI,OAAKA,EAAQ,KACzB,MACF,IAAK,UACHT,GAAW,SAAAS,GAAI,OAAKA,EAAQ,KAC5B,MACF,IAAK,MACHR,GAAO,SAAAQ,GAAI,OAAKA,EAAQ,WA2B1B,cAAC,EAAD,CAAShB,MAAM,aAAf,SACsB,IAAnBU,EACC,cAAC,EAAD,CAAcP,QAAS,yBAEvB,cAAC,EAAD,CACErB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOyB,EACPxB,mBAAoBA,S,MCvDhC+B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACf,EAAD,MAEFgB,SAASC,eAAe,W","file":"static/js/main.ba503530.chunk.js","sourcesContent":["import './Statistics.scss';\r\n\r\ninterface Props {\r\n  good: number;\r\n  neutral: number;\r\n  bad: number;\r\n  total: number;\r\n  positivePercentage: number;\r\n}\r\n\r\nexport default function Statistics({\r\n  good,\r\n  neutral,\r\n  bad,\r\n  total,\r\n  positivePercentage,\r\n}: Props) {\r\n  return (\r\n    <ul className=\"stats-list\">\r\n      <li className=\"stats-list__item\">\r\n        Good: <span>{good}</span>\r\n      </li>\r\n      <li className=\"stats-list__item\">\r\n        Neutral: <span>{neutral}</span>\r\n      </li>\r\n      <li className=\"stats-list__item\">\r\n        Bad: <span>{bad}</span>\r\n      </li>\r\n      <li className=\"stats-list__item\">\r\n        Total: <span>{total}</span>\r\n      </li>\r\n      <li className=\"stats-list__item\">\r\n        Positive feedback:{' '}\r\n        <span>{isNaN(positivePercentage) ? '0' : positivePercentage}%</span>\r\n      </li>\r\n    </ul>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport './FeedbackOptions.scss';\r\n\r\ntype Option = { good: number; neutral: number; bad: number };\r\n\r\ninterface Props {\r\n  options: Option;\r\n  onLeaveFeedback: (\r\n    evt: React.MouseEvent<HTMLButtonElement, MouseEvent>,\r\n  ) => void;\r\n}\r\n\r\nexport default function FeedbackOptions({ options, onLeaveFeedback }: Props) {\r\n  return (\r\n    <ul className=\"list\">\r\n      {Object.keys(options).map(key => (\r\n        <li className=\"list__item\" key={key}>\r\n          <button\r\n            className=\"list__button\"\r\n            name={key}\r\n            type=\"button\"\r\n            onClick={onLeaveFeedback}\r\n          >\r\n            {key}\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport './Section.scss';\r\n\r\ninterface Props {\r\n  title: string;\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport default function Section({ title, children }: Props) {\r\n  return (\r\n    <section>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\n","import './Notification.scss';\r\n\r\ninterface Props {\r\n  message: string;\r\n}\r\n\r\nexport default function Notification({ message }: Props) {\r\n  return <p>{message}</p>;\r\n}\r\n","import React, { useState } from 'react';\nimport Statistics from './components/Statistics';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Section from './components/Section';\nimport Notification from './components/Notification';\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const onLeaveFeedback = (\n    evt: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n  ) => {\n    const { name } = evt.target as HTMLButtonElement;\n\n    switch (name) {\n      case 'good':\n        setGood(prev => (prev += 1));\n        break;\n      case 'neutral':\n        setNeutral(prev => (prev += 1));\n        break;\n      case 'bad':\n        setBad(prev => (prev += 1));\n        break;\n      default:\n        break;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    const total = countTotalFeedback();\n    return Math.round((good * 100) / total);\n  };\n\n  const totalFeedbacks = countTotalFeedback();\n  const positivePercentage = countPositiveFeedbackPercentage();\n\n  return (\n    <>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={{ good, neutral, bad }}\n          onLeaveFeedback={onLeaveFeedback}\n        />\n      </Section>\n      <Section title=\"Statistics\">\n        {totalFeedbacks === 0 ? (\n          <Notification message={'No feedback given :('} />\n        ) : (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={totalFeedbacks}\n            positivePercentage={positivePercentage}\n          />\n        )}\n      </Section>\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}